package trendsHandlers

import (
	"encoding/json"
	"fmt"
	"main/middlewares"
	"main/models"
	repositoriesDB "main/repositories"
	"strconv"

	"github.com/gofiber/fiber/v2"

	"go.opentelemetry.io/otel/trace"
)

func GetSelectedTrends(c *fiber.Ctx) error {

	_, span := middlewares.GetOpenTelemetry().Start(
		c.Context(),
		"GetSelectedTrends",
	)
	defer span.End()

	begin, err := strconv.Atoi(c.Params("begin"))
	if err != nil {
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	end, err := strconv.Atoi(c.Params("end"))
	if err != nil {
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	if begin < 0 {
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	if end < 0 {
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	data, success := repositoriesDB.GetStrKey(models.KEY_TRENDS_MALWARE)

	if !success {

		dataTrace := &models.DataTrace{
			FunctionName: "GetSelectedTrends",
			FileName:     "trends.go",
			Data:         c.Request().String(),
			Error:        fmt.Errorf("ERROR | FINALLY | CANNOT GET DATA"),
		}

		attributes := middlewares.SetAttributesFailedDB(dataTrace)
		span.AddEvent("log", trace.WithAttributes(attributes...))

		return c.JSON(fiber.Map{
			"data": nil,
		})
	}

	var allTrends models.Trends
	var selectedTrends models.Trends
	json.Unmarshal([]byte(data), &allTrends)

	if end > len(allTrends.Value) {
		end = len(allTrends.Value)
	}
	for i := begin; i <= end; i++ {
		selectedTrends.Value = append(selectedTrends.Value, allTrends.Value[i])
	}

	return c.JSON(fiber.Map{
		"data": selectedTrends,
	})
}

func GetAllTrends(c *fiber.Ctx) error {

	_, span := middlewares.GetOpenTelemetry().Start(
		c.Context(),
		"GetAllTrends",
	)
	defer span.End()

	data, success := repositoriesDB.GetStrKey(models.KEY_TRENDS_MALWARE)

	if !success {

		dataTrace := &models.DataTrace{
			FunctionName: "GetAllTrends",
			FileName:     "trends.go",
			Data:         c.Request().String(),
			Error:        fmt.Errorf("ERROR | FINALLY | CANNOT GET DATA"),
		}

		attributes := middlewares.SetAttributesFailedDB(dataTrace)
		span.AddEvent("log", trace.WithAttributes(attributes...))

		return c.JSON(fiber.Map{
			"data": nil,
		})
	}

	return c.Send([]byte(data))

}

func GetCurrentVersion(c *fiber.Ctx) error {

	_, span := middlewares.GetOpenTelemetry().Start(
		c.Context(),
		"GetCurrentVersion",
	)
	defer span.End()

	versionStr, success := repositoriesDB.GetStrKey(models.KEY_COUNT_TRENDS_MALWARE)
	if !success {

		dataTrace := &models.DataTrace{
			FunctionName: "GetCurrentVersion",
			FileName:     "trends.go",
			Data:         c.Request().String(),
			Error:        fmt.Errorf("ERROR | FINALLY | CANNOT GET DATA"),
		}

		attributes := middlewares.SetAttributesFailedDB(dataTrace)
		span.AddEvent("log", trace.WithAttributes(attributes...))

		return c.JSON(fiber.Map{
			"version": 0,
		})
	}
	currentVersion, err := strconv.Atoi(versionStr)
	if err != nil {
		currentVersion = 0
	}
	return c.JSON(fiber.Map{
		"version": currentVersion,
	})

}
