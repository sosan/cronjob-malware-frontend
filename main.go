package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"main/config"
	"main/database"
	"main/fetch"
	"main/middlewares"
	"main/models"
	"main/repositories"
	"main/routes"
	"os/signal"
	"syscall"

	"os"
	"time"

	"github.com/go-co-op/gocron"
	"github.com/gofiber/fiber/v2"
)

var currentVersion int64

func init() {

	config.SetupEnvs()

	database.SetupDB()
}

func getPort() string {
	port := os.Getenv("PORT")
	if port == "" {
		port = ":3000"
	} else {
		port = ":" + port
	}

	return port
}

func main() {

	job := gocron.NewScheduler(time.UTC)
	// https://github.com/go-co-op/gocron/blob/main/example_test.go
  job.Every(1).Day().At("05:00").Do(
    taskSaveTrends,
	)

	job.StartAsync()

	app := fiber.New()
  middlewares.Setup(app)
  routes.SetupRoutes(app)

  go func() {
		
    // if err := app.ListenMutualTLS(PORT_BACKEND_STRING, "./localcerts/server/cert.pem", "./localcerts/server/key.pem", "./localcerts/ca/cert.pem"); err != nil {
    if err := app.Listen(getPort()); err != nil {
      log.Panic(err)
    }
		
	}()

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	<-c
	fmt.Println("Gracefully shutting down...")
	_ = app.Shutdown()

}

var taskSaveTrends = func() {

  // recoger
	log.Print("guardar trends")
	uri, ok := os.LookupEnv("MALWARE_TRENDS")
	if !ok {
		log.Fatal("no malware trends uri")
	}

	response := fetch.Get(uri)

	if response == nil {
		// TODO: telemetry
		log.Printf("sin respuesta")
	}

  // add { data: }
	var byte_buf bytes.Buffer
  x := fmt.Sprintf(`{ "data" : %s }`, response)
  byte_buf.WriteString(x)

  // serizalize to golang objects
	var trends *models.Trends
	json.Unmarshal(byte_buf.Bytes(), &trends)

  jsonTrends, err := json.Marshal(trends)

  if err != nil {
    log.Printf("ERROR | Not possible encode to json %v", trends)
    // TOOD: telemetry
  }
	// // guardar redis
	result := repositoriesDB.SetStrKey("trends-malware", string(jsonTrends) )
  if !result {
    log.Printf("ERROR | Not possible to save into redis %v", byte_buf.String())
    // TOOD: telemetry
  }
  
	currentVersion, ok = repositoriesDB.Incr("count-trends-malware")
  if !ok {
    log.Panicf("ERROR | Not possible to incremnt count-trends-malware")
  }
	

}
