package tasks

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"main/fetch"
	"main/models"
	"main/repositories"
	"os"
)

var currentVersion int64

func TaskSaveTrends() { 

	// recoger
	log.Print("guardar trends")
	uri, ok := os.LookupEnv("MALWARE_TRENDS")
	if !ok {
		log.Fatal("no malware trends uri")
	}

	response := fetch.Get(uri)

	if response == nil {
		log.Printf("sin respuesta")
		// TODO: telemetry
	}

	// add { data: } to bytes
	// TODO: sure it will be better way to do it
	var byte_buf bytes.Buffer
	formatString := fmt.Sprintf(`{ "data" : %s }`, response)
	byte_buf.WriteString(formatString)

	// serizalize to golang objects
	var trends *models.Trends
	json.Unmarshal(byte_buf.Bytes(), &trends)
	
	// JSON
	jsonTrends, err := json.Marshal(trends)

	if err != nil {
		log.Printf("ERROR | Not possible encode to json %v", trends)
		// TOOD: telemetry
	}
	// // guardar redis
	result := repositoriesDB.SetStrKey("trends-malware", string(jsonTrends))
	if !result {
		log.Printf("ERROR | Not possible to save into redis %v", byte_buf.String())
		// TOOD: telemetry
	}

	currentVersion, ok = repositoriesDB.Incr("count-trends-malware")
	if !ok {
		log.Panicf("ERROR | Not possible to incremnt count-trends-malware")
	}

}