package tasks

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"main/fetch"
	"main/middlewares"
	"main/models"
	repositoriesDB "main/repositories"
	"os"

	"go.opentelemetry.io/otel/trace"
)

var currentVersion int64

func TaskSaveTrends() {

	ctx, span := middlewares.GetOpenTelemetry().Start(
		context.Background(),
		"TaskSaveTrends",
	)
	defer span.End()

	// recoger
	log.Print("guardar trends")
	uri, ok := os.LookupEnv("MALWARE_TRENDS")
	if !ok {
		attributes := middlewares.SetAttributesFailedEnvMalwareTrends("TaskSaveTrends", "save.go", "no es posible obtener os.getenv")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | no malware trends uri")
	}

	response := fetch.Get(uri, ctx)

	if response == nil {

		attributes := middlewares.SetAttributesFailedUriMalwareTrends("TaskSaveTrends", "save.go", "no es posible obtener url malware trends")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | No response from Uri")
	}

	// add { data: } to bytes
	// TODO: sure it will be better way to do it
	var byte_buf bytes.Buffer
	formatString := fmt.Sprintf(`{ "data" : %s }`, response)
	byte_buf.WriteString(formatString)

	// serizalize to golang objects
	var trends *models.Trends
	json.Unmarshal(byte_buf.Bytes(), &trends)

	// JSON
	jsonTrends, err := json.Marshal(trends)

	if err != nil {
		attributes := middlewares.SetAttributesFailedJSONMarshall("TaskSaveTrends", "save.go", byte_buf.String())
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panicf("ERROR | Not possible encode to json %v", trends)

	}
	// // guardar redis
	result := repositoriesDB.SetStrKey("trends-malware", string(jsonTrends))
	if !result {
		attributes := middlewares.SetAttributesFailedSaveRedis("TaskSaveTrends", "trends-malware", string(jsonTrends))
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panicf("ERROR | Not possible to save into redis %v", byte_buf.String())

	}

	currentVersion, ok = repositoriesDB.Incr("count-trends-malware")
	if !ok {
		attributes := middlewares.SetAttributesFailedSaveRedis("TaskSaveTrends", "count-trends-malware", string(jsonTrends))
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panicf("ERROR | Not possible to incremnt count-trends-malware")
	}

}
