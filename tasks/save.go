package tasks

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"main/encode"
	"main/fetch"
	"main/middlewares"
	"main/models"
	repositoriesDB "main/repositories"
	"os"

	"go.opentelemetry.io/otel/trace"
)

var currentVersion int64

func TaskSaveTrends() {

	ctx, span := middlewares.GetOpenTelemetry().Start(
		context.Background(),
		"TaskSaveTrends",
	)
	defer span.End()

	// recoger
	log.Print("guardar trends")
	uri, ok := os.LookupEnv("MALWARE_TRENDS")
	if !ok {
		attributes := middlewares.SetAttributesFailedEnvMalwareTrends("TaskSaveTrends", "save.go", "no es posible obtener os.getenv")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | no malware trends uri")
	}

	response := fetch.Get(uri, ctx)

	if response == nil {

		attributes := middlewares.SetAttributesFailedUriMalwareTrends("TaskSaveTrends", "save.go", "no es posible obtener url malware trends")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | No response from Uri")
	}

	// add { data: } to bytes
	// TODO: sure it will be better way to do it
	var byte_buf bytes.Buffer
	formatString := fmt.Sprintf(`{ "data" : %s }`, response)
	_, err := byte_buf.WriteString(formatString)
  if err != nil {
    attributes := middlewares.SetAttributesFailedUriMalwareTrends("TaskSaveTrends", "save.go", fmt.Sprintf("no es posible byte_buf.WriteString %s", formatString) )
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | Cannot byte_buf.WriteString")
  }
	// // serizalize to golang objects
	var trends models.Trends
	// err = json.Unmarshal(byte_buf.Bytes(), &trends)
  err = encode.DecodingData(byte_buf.Bytes(), &trends)

  if err != nil {
    attributes := middlewares.SetAttributesFailedUriMalwareTrends("TaskSaveTrends", "save.go", fmt.Sprintf("no es posible unmarshall %s", formatString) )
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | Cannot Unmarshal")
  }

	// // guardar redis
  result := repositoriesDB.SetStrKey(models.KEY_TRENDS_MALWARE, trends)
	if !result {
		attributes := middlewares.SetAttributesFailedSaveRedis("TaskSaveTrends", models.KEY_TRENDS_MALWARE, string(formatString))
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panicf("ERROR | Not possible to save into redis %v", byte_buf.String())

	}

	currentVersion, ok = repositoriesDB.Incr(models.KEY_COUNT_TRENDS_MALWARE)
	if !ok {
		attributes := middlewares.SetAttributesFailedSaveRedis("TaskSaveTrends", models.KEY_COUNT_TRENDS_MALWARE, string(formatString))
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panicf("ERROR | Not possible to incremnt %s", models.KEY_COUNT_TRENDS_MALWARE)
	}

  log.Print("guardados trends")
}
