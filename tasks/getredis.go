package tasks

import (
	"context"
	"log"
	"main/middlewares"
	"os"

	"github.com/redis/go-redis/v9"
	"go.opentelemetry.io/otel/trace"
)

const (
	PONG = "PONG"
)


func TaskReadRedis() {

  ctx, span := middlewares.GetOpenTelemetry().Start(
		context.Background(),
		"TaskSaveTrends",
	)
	defer span.End()

	// recoger
  uri, ok := os.LookupEnv("URI_REDIS_CRONJOB")

  if !ok {
		attributes := middlewares.SetAttributesFailedEnvMalwareTrends("TaskSaveTrends", "getredis.go", "no es posible obtener os.getenv")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | no cronjob get redis")
	}

  opt, err := redis.ParseURL(uri)
	redisClient := redis.NewClient(opt)
	defer redisClient.Close()

  if (err != nil) {
		panic(err)
	}

	status, err := redisClient.Ping(ctx).Result()
	if (err != nil) && (status != PONG) {
		panic(err)
	}

  key, ok := os.LookupEnv("URI_REDIS_CRONJOB")

  if !ok {
		attributes := middlewares.SetAttributesFailedEnvMalwareTrends("TaskSaveTrends", "getredis.go", "no es posible obtener key para leer el redis")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | no cronjob get redis")
	}

	_, err = redisClient.Get(ctx, key).Result()
	if err != nil {
		attributes := middlewares.SetAttributesFailedEnvMalwareTrends("TaskSaveTrends", "getredis.go", "no es posible obtener key para leer el redis")
		span.AddEvent("log", trace.WithAttributes(attributes...))

		log.Panic("ERROR | no cronjob get redis")
	}


}
