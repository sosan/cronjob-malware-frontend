package middlewares

import (
	"main/models"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

var tracer = otel.Tracer("cronjob-malware-trends")

// var tracer trace.Tracer

// func SetTelemetry(newTrace *trace.Tracer) {
//   tracer = *newTrace
// }

func GetOpenTelemetry() trace.Tracer {
	return tracer
}

func SetAttributesFailedDB(dataTrace *models.DataTrace) []attribute.KeyValue {

	a := []attribute.KeyValue{
		attribute.String("container.name", "server"),
		attribute.String("log.severity", "error"),
		attribute.String("log.message", "DB failed"),
		attribute.String("code.function", dataTrace.FunctionName),
		attribute.String("code.filepath", dataTrace.FileName),
		attribute.String("code.data", dataTrace.Data),
	}
	return a
}

func SetAttributesFailedEnvMalwareTrends(functionName string, fileName string, data string) []attribute.KeyValue {

	a := []attribute.KeyValue{
		attribute.String("container.name", "server"),
		attribute.String("log.severity", "error"),
		attribute.String("log.message", "os.Getenv not posible"),
		attribute.String("code.function", functionName),
		attribute.String("code.filepath", fileName),
		attribute.String("code.data", data),
	}
	return a
}

func SetAttributesFailedUriMalwareTrends(functionName string, fileName string, data string) []attribute.KeyValue {

	a := []attribute.KeyValue{
		attribute.String("container.name", "server"),
		attribute.String("log.severity", "error"),
		attribute.String("log.message", "Uri not posible"),
		attribute.String("code.function", functionName),
		attribute.String("code.filepath", fileName),
		attribute.String("code.data", data),
	}
	return a
}

func SetAttributesFailedJSONMarshall(functionName string, fileName string, data string) []attribute.KeyValue {

	a := []attribute.KeyValue{
		attribute.String("container.name", "server"),
		attribute.String("log.severity", "error"),
		attribute.String("log.message", "JSON Marshall not posible"),
		attribute.String("code.function", functionName),
		attribute.String("code.filepath", fileName),
		attribute.String("code.data", data),
	}
	return a
}

func SetAttributesFailedSaveRedis(functionName string, fileName string, data string) []attribute.KeyValue {

	a := []attribute.KeyValue{
		attribute.String("container.name", "server"),
		attribute.String("log.severity", "error"),
		attribute.String("log.message", "Failed save to redis"),
		attribute.String("code.function", functionName),
		attribute.String("code.filepath", fileName),
		attribute.String("code.data", data),
	}
	return a
}
