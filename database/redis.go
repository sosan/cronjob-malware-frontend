package database

import (
	"context"
	"github.com/redis/go-redis/v9"
	"log"
	"main/models"
	"net"
	"os"
	"time"
)

var ctx = context.Background()
var rdb *redis.Client

func SetupDB() {

	redisConfig := getRedisCredentials()

	rdb = redis.NewClient(&redis.Options{
		Addr:         redisConfig.Addr,
		Password:     redisConfig.Password,
		Username:     redisConfig.User,
		DB:           redisConfig.DB,
		ReadTimeout:  3 * time.Second,
		WriteTimeout: 3 * time.Second,
		PoolSize:     10,
		PoolTimeout:  3 * time.Second,
		DialTimeout:  3 * time.Second,
	})

	status, err := rdb.Ping(ctx).Result()

	if err != nil && status != "PONG" {
		log.Fatal("Conexion pero sin resultado pong")
	} else {
		log.Printf("[REDIS CONECTADO]")
	}

}

func getRedisCredentials() models.RedisConfig {

	var redisConfig models.RedisConfig
	var ok bool

	redisConfig.DB = 0
	redisConfig.Host, ok = os.LookupEnv("REDISHOST")

	if !ok {
		redisConfig.Host = "localhost"
	}

	redisConfig.Port, ok = os.LookupEnv("REDISPORT")

	if !ok {
		redisConfig.Port = "6479"
	}

	redisConfig.Addr = net.JoinHostPort(redisConfig.Host, redisConfig.Port)

	redisConfig.Password, ok = os.LookupEnv("REDISPASSWORD")

	if !ok {
		redisConfig.Password = "55nt8SH68VD_r7UCga2iR277%6d6_nEEt_XokN+1NEP7S6f_3fB"
	}

	redisConfig.User, ok = os.LookupEnv("REDISUSER")

	if !ok {
		redisConfig.User = "default"
	}

	return redisConfig

}

func GetStrKey(key string) (string, error) {
	response, err := rdb.Get(ctx, key).Result()
	return response, err
}

func SetStrKey(key string, value string) bool {

	response, err := rdb.Set(ctx, key, value, redis.KeepTTL).Result()
	if err != nil {
		log.Fatalf("Error | Cannot save key %s for this content %v", key, value)
	}
	if response != "OK" {
		return false
	}

	return true
}

func Incr(key string) (int64, error) {

	status, err := rdb.Incr(ctx, key).Result()
	return status, err

}
